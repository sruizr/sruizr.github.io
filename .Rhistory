getwd()
install.packages("caret")
installed.packages(caret)
installed.packages("caret")
install.packages("ApliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
summary(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
sessionInfo()
names(training)
newPredictors  <- match(names(training),table = "IL")
newPredictors
newPredictors  <- regexec(names(training),"IL")
newPredictors  <- regexec(names(training),pattern = "IL")
newPredictors
newPredictors  <- regexec(names(training),pattern = "IL")>1
newPredictors  <- regexec(names(training),pattern = "IL")>1
newPredictors
newPredictors  <- gregexpr(text = names(training),pattern = "IL")>1
newPredictors  <- gregexpr(text = names(training),pattern = "IL")
newPredictors
sapply(names(training),FUN = regexec,... = "IL")
grep(names(training),pattern = "IL")
newColumns  <-  c(1, grep(names(training), pattern="IL"))
training[,newColumns]
names(training[,newColumns])
newColumns
length(newColumns)
newColumns[14]  <- null
newColumns[14]  <- NULL
length(newColumns)
newColumns[14]  <-
NA
length(newColumns)
newColumns  <- newColumns[-14]
length(newColumns)
newColumns
newTraining <- training[,newColumns]
summary(newTraining)
size(newTraining)
dim(newTraining)
modelWithPCA  <- train(newTraining$diagnosis~., method="glm", preprocess="pca", data=newTraining)
install.package("e1071")
install.packages("e1071")
modelWithPCA  <- train(newTraining$diagnosis~., method="glm", preprocess="pca", data=newTraining)
summary(newTraining)
prComp  <- prcomp(newTraining)
prComp  <- prcomp(newTraining[-1])
prComp
modelWithPCA  <- train(newTraining$diagnosis~., method="glm", preprocess="pca", data=newTraining[-1])
type(newTraining$diagnosis)
str(newTraining)
prComp$sdev
prComp$sdev / sum(prComp)
prComp$sdev / sum(prComp$sdev)
ls
ls()
library(caret)
pr <- preProcess(newTraining[,-1],thresh = 0.9)
pr$dim
pr
pr$pcaComp
pr <- preProcess(newTraining[,-1],thresh = 0.9, method = c("center", "scale", "pca"))
pr$pcaComp
?prcomp
summary(newTraining)
ls()
pr
pr$numComp
pr$pcaComp
?preProcess
pr <- preProcess(newTraining[,-1],thresh = 0.8, method = c("center", "scale", "pca"))
predictors  <- newTraining[,-1]
pcaPredictors  <-  pr
model <-  train(training$diagnosis~predictors)
model <-  train(training$diagnosis~., data = predictors)
model <-  train(training$diagnosis~., data = predictors, method = "glm")
model
str(predictors)
model <-  train(training$diagnosis~., data = pcaPredictors, method = "glm")
modelPCA <-  train(training$diagnosis~., data = pcaPredictors, method = "glm")
model  <-  train(training$diagnosis~.,method = "glm", data= newTraining[-1])
model
prComp
prcom
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
prC  <- preProcess(training[,-1], method = c("center", "scale", "pca"),thresh = 0.8)
ILcolumns  <-  grep(names(training), pattern = "^IL")
ILcolumns
names(training)[ILcolumns]
ILtraining  <- training[,c(1, ILcolumns)]
names(ILtraining)
pcaTrain <-  preProcess(x = ILtraining[,-1], method = c("center", "scale", "pca"), thresh = 0.8)
pcaTrain
preProc <- preProcess(ILtraining[,-1], method="pca", thresh=0.8)
trainPCA <- predict(preProc,ILtraining[,-1])
modelPCA <- train(training$diagnosis ~ .,method="glm",data=trainPCA)
model <- train(training$diagnosis ~ .,method="glm",data=ILtraining)
preProc
modelPCA
model
ILtesting <-  testing[,c(1, ILcolumns)]
testPCA <- predict(preProc,ILtesting[,-1]))
confusionMatrix(testing$type,predict(modelPCA,testPCA))
testPCA <- predict(preProc,ILtesting[,-1])
confusionMatrix(testing$type,predict(modelPCA,testPCA))
confusionMatrix(testing$type,predict(modelPCA,testPCA)
)
confusionMatrix(testing$diagnosis,predict(modelPCA,testPCA)
)
confusionMatrix(testing$diagnosis, predict(modelPCA, testing[,-1]))
confusionMatrix(testing$diagnosis, predict(model, testing[,-1]))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILcolumns  <-  grep(names(training), pattern = "^IL")
ILtesting <- testing[,c(1, ILcolumns)]
ILtraining <- training[,c(1, ILcolumns)]
preProc <- preProcess(ILtraining[,-1], method="pca", thresh=0.8)
trainPCA <- predict(preProc,ILtraining[,-1])
modelPCA <- train(training$diagnosis ~ ., method="glm",data=trainPCA)
model <- train(training$diagnosis ~ ., method="glm",data=ILtraining)
ILtesting <-  testing[,c(1, ILcolumns)]
testPCA <- predict(preProc,ILtesting[,-1])
confusionMatrix(testing$diagnosis,predict(modelPCA,testPCA))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
?segmentationData
str(segmentationOriginal)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
summary(olive)
str(olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
?t
olive
summary(olive)
str(olive)
outcome <- olive$area
outcome
outcome <- olive$Area
outcome
training <- olive[,-1]
str(training)
library(caret)
model  <-  train(outcome ~ . , method = "rpart", data = training)
predict(model, newdata = newdata[-1])
model
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
training  <- segmentationOriginal[,Case == "Train"]
training  <- segmentationOriginal[,Case = "Train"]
training  <- segmentationOriginal[segmentationOriginal$Case = "Train"]
training  <- segmentationOriginal[segmentationOriginal$Case == "Train"]
training  <- segmentationOriginal[segmentationOriginal$Case == "Train",]
training.outcome  <-  training$Class
str(training)
?segmentationOriginal
training.features   <- training[, c(-2,-3)]
str(training.features)
set.seed(125)
model  <- train(training.outcome ~ . , method = "rpart", data = training.features)
model
library(tree)
install.package(tree)
install.package("tree")
install.packages("tree")
print(model$finalModel)
plot(model$finalModel, uniform=TRUE)
install.packages(rattle)
install.packages("rattle")
library(rattle)
install.packages(‘RGtk2’)
install.packages("RGtk2")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(model$finalModel)
clear
clear()
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
model  <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial")
model  <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainPrediction  <-  predict(model, trainSA)
head(trainPrediction)
trainSA
testPrediction  <- predict(model, testSA)
missClass(trainSA$chd, trainPrediction)
missClass(testSA$chd, testPrediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <-  as.factor(vowel.test$y)
vowel.train$y <-  as.factor(vowel.train$y)
set.seed(33833)
rFModel  <- train(y ~ . , data = vowel.train, method = "rf", prox=TRUE)
?varImp
varImp(rFModel)
